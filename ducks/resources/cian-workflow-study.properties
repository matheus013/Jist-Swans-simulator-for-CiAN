# 
# DUCKS v2 config file sample
# 
# Consists of 2 parts:
# 1. Options for the DUCKS driver, which control the simulation setup, i.e.
#    which nodes, how many nodes, propagation, mobility and so on.
# 2. Options for the DUCKS controller. This part is only required, if
#    simulations are to be run by the Controller, which is able to
#    to multiplex simulations, distribute workload to multiple servers and 
#    automatically save results in a database or logfile

# DUCKS Driver model part ...................................
# The DUCKS v2 generic SWANS driver model tries to be as modular as possible.
# Actually, DUCKS uses a basic driver class (ducks.driver.Main), which is able
# to handle input (this configuration) and output. Within this class, a configurable driver
# implementing the DucksDriverModule interface is loaded. Via the interface, it is only expected to
# - accept configuration parameters (i.e. drawn from this config)
# - deliver result properties
# All simulation related initialization (i.e. the typical setup of scene and nodes) can be done
# within the given driver class. An implementation of such a Driver is offered by DUCKS,
# namely ducks.driver.GenericDriver, which itself consists of exchangeable subcomponents.
ducks.sim.class=ducks.driver.GenericDriver

# The duration of the simulation is required for DUCKS, since it must know when to ask for 
# results (seconds)
ducks.sim.duration=11200

# Random seed is required for DUCKS, if one wants to set a seed to make
# simulations repeatable (value is of type long). 
# To get real random numbers, unset the seed parameter (by placing a comment sign (#)) 
# ducks.sim.random.seed=0
# EDIT WITH PERL
ducks.sim.random.seed=1267451216

# .....................................................................
# The following parameters are processed by the DUCKS generic driver
# and are subject to be changed with every user-defined driver.

ducks.scene.class=ducks.driver.GenericScene
ducks.scene.fieldsize.x=996
ducks.scene.fieldsize.y=996

#ducks.scene.mobility=static

ducks.scene.mobility=waypoint
ducks.scene.mobility.waypoint.pausetime=0
ducks.scene.mobility.waypoint.precision=3
# EDIT WITH PERL
ducks.scene.mobility.waypoint.speed.min=1
# EDIT WITH PERL
ducks.scene.mobility.waypoint.speed.max=2

# STRAW is a street-based mobility model contained in the 'vans' package.
# Note that the field size must be set according the map data
ducks.scene.strawviz=0
#ducks.scene.mobility=straw-od
#ducks.scene.mobility=straw-simple
#ducks.scene.mobility.straw.latitude.max=42.33
#ducks.scene.mobility.straw.latitude.min=42.23
#ducks.scene.mobility.straw.longitude.max=-71.00
#ducks.scene.mobility.straw.longitude.min=-71.20

# enable this if ducks.driver is used
#ducks.scene.mobility.straw.maps.segments=../vans/maps/suffolk/segments.dat
#ducks.scene.mobility.straw.maps.streets=../vans/maps/suffolk/names.dat
#ducks.scene.mobility.straw.maps.shapes=../vans/maps/suffolk/chains.dat

# enable this if ducks.controller is used
#ducks.scene.mobility.straw.maps.segments=../../vans/maps/suffolk/segments.dat
#ducks.scene.mobility.straw.maps.streets=../../vans/maps/suffolk/names.dat
#ducks.scene.mobility.straw.maps.shapes=../../vans/maps/suffolk/chains.dat
#ducks.scene.mobility.straw.degree=4
#ducks.scene.mobility.straw.granularity=2
#ducks.scene.mobility.straw.probability=0.3

# The 'replay' mobility model is able to load and replay previously generated
# node movements from a file. Currently, the typical ns-2 format is available. 
#ducks.scene.mobility=replay
#ducks.scene.mobility.replay.precision=3
#ducks.scene.mobility.replay.class=ext.jist.swans.mobility.MobilityReaderNs2
# test.tcl: 11500x20, 60s
#ducks.scene.mobility.replay.file=resources/mobility/test.tcl

# The following parameters control signal propagation. Mutiple models can be used,
# see GenericScene for currently supported parameter set. 
ducks.scene.spatial.binning=hier
ducks.scene.spatial.binning.wraparound=false
ducks.scene.fading=none
ducks.scene.pathloss=freespace

# The GenericDriver requires a component to implement the Nodes interface. DUCKs offers
# the GenericNodes class for that. The class is able to instantiate multiple types of
# nodes
ducks.nodes.class=ducks.driver.GenericNodes

# As an example, DUCKS comes with the 'GenericNode' class, which can build a node from
# standard components of SWANS. For extensions of the model, it is recommended to derive
# classed from that implementation and give them here as node type. As one can see,
# all parameters for one kind of nodes reside in a subnamespace of 'ducks.nodes'.
# If another kind of nodes shall be instantiated in the same simulation, it is sufficient 
# to add an arbitrary new namespace, 'xyz' if you like. Give two parameters 'class' and 'count'
# in this namespace, e.g. 'ducks.nodes.xyz.class=my.project.Node' and 
# 'ducks.nodes.xyz.count=10', and GenericNodes will instantiate 10 objects of the class
# my.project.Node and give them all the parameters under ducks.nodes.xyz.*

#ducks.nodes.a.class=ducks.driver.GenericNode
#ducks.nodes.a.count=100

ducks.nodes.c.class=ducks.driver.CiANInitiatorNode
ducks.nodes.c.count=1

ducks.nodes.p.class=ducks.driver.CiANProviderNode
ducks.nodes.p.count=3

# txpower unterschiedlich abhängig vom Pathloss und Fading
# txpower=7.1 = 250m bei Freespace Pathloss und ohne Fading
# txpower=7.9 = 250m bei TwoRay Pathloss und ohne Fading
# txpower=15  (FreeSpace -> 627m, TwoRay -> 376m)
#ducks.nodes.a.radio.txpower=7.1
ducks.nodes.c.radio.txpower=7.1
ducks.nodes.p.radio.txpower=7.1

#ducks.nodes.a.loss.in=zero
#ducks.nodes.a.loss.out=zero
ducks.nodes.c.loss.in=zero
ducks.nodes.c.loss.out=zero
ducks.nodes.p.loss.in=zero
ducks.nodes.p.loss.out=zero

#ducks.nodes.a.placement=random
#ducks.nodes.a.placement=street-random
#ducks.nodes.c.placement=street-random
#ducks.nodes.p.placement=street-random
ducks.nodes.c.placement=random
ducks.nodes.p.placement=random
#ducks.nodes.c.placement=grid
#ducks.nodes.c.placement.i=1
#ducks.nodes.c.placement.j=1
#ducks.nodes.p.placement=grid
#ducks.nodes.p.placement.i=4
#ducks.nodes.p.placement.j=4

#ducks.nodes.a.noise=additive
#ducks.nodes.a.mac=802.11
#ducks.nodes.a.mac.promiscuous=false
ducks.nodes.c.noise=additive
ducks.nodes.c.mac=802.11
ducks.nodes.c.mac.promiscuous=false
ducks.nodes.p.noise=additive
ducks.nodes.p.mac=802.11
ducks.nodes.p.mac.promiscuous=false

#ducks.nodes.a.routing=aodv
ducks.nodes.c.routing=aodv
ducks.nodes.p.routing=aodv

#ducks.nodes.a.traffic=
#ducks.nodes.a.traffic=cbr
## define number of packets per minute and node
#ducks.nodes.a.traffic.cbr.rate=1
## define average wait time between connections
#ducks.nodes.a.traffic.cbr.waittime=0
## define number of packets per connection
#ducks.nodes.a.traffic.cbr.packetspercon=1

ducks.nodes.p.traffic=service
ducks.nodes.c.traffic=service
# request.rate is not used at the moment
ducks.nodes.c.traffic.service.request.rate=40000
#ducks.nodes.c.traffic.service.invoke.delay=10
ducks.nodes.p.traffic.service.composition.restriction=no-repeat
# EDIT WITH PERL
ducks.nodes.p.traffic.service.composition.type=conventional
# EDIT WITH PERL
ducks.nodes.c.traffic.service.composition.length=5
# EDIT WITH PERL
ducks.nodes.p.traffic.service.composition.length=5

# provider-specific service execution time (ms), provider-id starts with 2
# EDIT WITH PERL



#ducks.nodes.a.app.waittime.start=20
#ducks.nodes.a.app.waittime.end=10
ducks.nodes.c.app.waittime.start=1000
ducks.nodes.c.app.waittime.end=60

# DUCKS Controller part .....................................

# This part is only evaluated, if the DUCKS Controller evaluates the
# config file. Be sure to understand, when the Controller can help you
# and when it only creates overhead. During development, it is not
# useful to run simulations via the Controller. In such a case, the
# ducks.driver.Main can be called directly, not via the Controller.
# The additional work that the Controller can do is 
# - to multiplex a single config file to many simulations (a simulation 'study')
#   (how this is done depends on configured multiplexer implementation, see below)
# - to distribute these single simulations to many JiST servers
# - to collect the results gathered using the StatsCollector mechanisms
#   and store them in a database or file

# Description of the simulation study
ducks.config.desc = Study: broadcast-only workflow protocol in RWP

# Number of executions to run for every unique configuration
# (to get statistical stability)
ducks.config.runs = 1

# Multiplexer class to use 
# In principle, DUCKS does not care, how multiple simulations are extracted 
# from the config file, as long as unique parameter sets for the generic driver 
# fall out in the end. Therefore, this is totally left to the multiplexer class 
# (a default multiplexer comes with DUCKS)
ducks.config.multiplexer.class=ducks.controller.simulation.DefaultSimulationMultiplexer

# DUCKS driver wrapper to use (usually not to be adapted)
#ducks.config.wrapper.class=ducks.driver.Main

# Remote monitoring and controlling (currently not finished)
ducks.config.monitor.enabled=false

# JiST servers to use
# All remote JiST servers have to be specified with hostname and port, where the
# third parameter element
ducks.servers.1.enabled=1
ducks.servers.1.hostname=localhost
ducks.servers.1.port=5550


# Statistics collection parameters

# DUCKS allows for multiple output sinks (storage provider), that can be specified by giving
# their classname here

# Gives a comma-separated list of namespaces for storage providers
ducks.stats.modules=file

# Specify each provider's class and configuration. The "class" property MUST be set, all other
# options are passed unmodified to the particular provider class via the configure method of
# the DucksModule interface.
ducks.stats.db.class=ducks.output.MySQLDatabase
ducks.stats.db.hostname=xyz
ducks.stats.db.port=3306
ducks.stats.db.dbname=jist-swans
ducks.stats.db.username=xyz
ducks.stats.db.password=xyz

ducks.stats.file.class=ducks.controller.output.LogFile
ducks.stats.file.name=../ducks/log/20110531-141800-speed-1-2/wf-3.log
ducks.stats.file.append=true

# Exclude or include specific parameters. Specified by a comma-separated list of
# properties, where wildcards are allowed. If both are specified, exclude is evaluated
# after include.
# Example: 
# ducks.stats.params.exclude=ducks.nodes.*.radio.*,ducks.scene.*
#
#ducks.stats.params.include=
#ducks.stats.params.exclude=

# Same for results properties. 
#ducks.stats.results.include=
#ducks.stats.results.exclude=

# Event logging during the simulation, particularly movements. Can log to SVG, but
# files get huge in this case, so be warned. Other formats (e.g. gnuplot are available)

#ducks.eventlog.modules=Movement
#ducks.eventlog.dest=SVG
ducks.eventlog.dest.SVG.outputfile=trace.svg
ducks.eventlog.dest.SVG.scaling.x=1
ducks.eventlog.dest.SVG.scaling.y=1
ducks.eventlog.dest.SVG.node.width=4
ducks.eventlog.dest.SVG.node.height=3
ducks.eventlog.dest.SVG.node.color=red
ducks.eventlog.dest.SVG.padding=10


ducks.nodes.p.traffic.service.exec.time.A.10=20
ducks.nodes.p.traffic.service.exec.time.A.11=81
ducks.nodes.p.traffic.service.exec.time.A.12=59
ducks.nodes.p.traffic.service.exec.time.A.13=69
ducks.nodes.p.traffic.service.exec.time.A.14=71
ducks.nodes.p.traffic.service.exec.time.A.15=14
ducks.nodes.p.traffic.service.exec.time.A.16=77
ducks.nodes.p.traffic.service.exec.time.A.17=20
ducks.nodes.p.traffic.service.exec.time.A.2=69
ducks.nodes.p.traffic.service.exec.time.A.3=65
ducks.nodes.p.traffic.service.exec.time.A.4=61
ducks.nodes.p.traffic.service.exec.time.A.5=15
ducks.nodes.p.traffic.service.exec.time.A.6=34
ducks.nodes.p.traffic.service.exec.time.A.7=51
ducks.nodes.p.traffic.service.exec.time.A.8=82
ducks.nodes.p.traffic.service.exec.time.A.9=34
ducks.nodes.p.traffic.service.exec.time.B.10=53
ducks.nodes.p.traffic.service.exec.time.B.11=75
ducks.nodes.p.traffic.service.exec.time.B.12=41
ducks.nodes.p.traffic.service.exec.time.B.13=22
ducks.nodes.p.traffic.service.exec.time.B.14=44
ducks.nodes.p.traffic.service.exec.time.B.15=43
ducks.nodes.p.traffic.service.exec.time.B.16=58
ducks.nodes.p.traffic.service.exec.time.B.17=60
ducks.nodes.p.traffic.service.exec.time.B.2=48
ducks.nodes.p.traffic.service.exec.time.B.3=85
ducks.nodes.p.traffic.service.exec.time.B.4=14
ducks.nodes.p.traffic.service.exec.time.B.5=36
ducks.nodes.p.traffic.service.exec.time.B.6=89
ducks.nodes.p.traffic.service.exec.time.B.7=79
ducks.nodes.p.traffic.service.exec.time.B.8=95
ducks.nodes.p.traffic.service.exec.time.B.9=13
ducks.nodes.p.traffic.service.exec.time.C.10=71
ducks.nodes.p.traffic.service.exec.time.C.11=61
ducks.nodes.p.traffic.service.exec.time.C.12=79
ducks.nodes.p.traffic.service.exec.time.C.13=57
ducks.nodes.p.traffic.service.exec.time.C.14=39
ducks.nodes.p.traffic.service.exec.time.C.15=10
ducks.nodes.p.traffic.service.exec.time.C.16=34
ducks.nodes.p.traffic.service.exec.time.C.17=46
ducks.nodes.p.traffic.service.exec.time.C.2=77
ducks.nodes.p.traffic.service.exec.time.C.3=95
ducks.nodes.p.traffic.service.exec.time.C.4=56
ducks.nodes.p.traffic.service.exec.time.C.5=94
ducks.nodes.p.traffic.service.exec.time.C.6=69
ducks.nodes.p.traffic.service.exec.time.C.7=64
ducks.nodes.p.traffic.service.exec.time.C.8=29
ducks.nodes.p.traffic.service.exec.time.C.9=40
ducks.nodes.p.traffic.service.exec.time.D.10=97
ducks.nodes.p.traffic.service.exec.time.D.11=72
ducks.nodes.p.traffic.service.exec.time.D.12=78
ducks.nodes.p.traffic.service.exec.time.D.13=81
ducks.nodes.p.traffic.service.exec.time.D.14=95
ducks.nodes.p.traffic.service.exec.time.D.15=50
ducks.nodes.p.traffic.service.exec.time.D.16=30
ducks.nodes.p.traffic.service.exec.time.D.17=55
ducks.nodes.p.traffic.service.exec.time.D.2=38
ducks.nodes.p.traffic.service.exec.time.D.3=44
ducks.nodes.p.traffic.service.exec.time.D.4=33
ducks.nodes.p.traffic.service.exec.time.D.5=40
ducks.nodes.p.traffic.service.exec.time.D.6=18
ducks.nodes.p.traffic.service.exec.time.D.7=20
ducks.nodes.p.traffic.service.exec.time.D.8=79
ducks.nodes.p.traffic.service.exec.time.D.9=89
ducks.nodes.p.traffic.service.exec.time.E.10=64
ducks.nodes.p.traffic.service.exec.time.E.11=93
ducks.nodes.p.traffic.service.exec.time.E.12=50
ducks.nodes.p.traffic.service.exec.time.E.13=90
ducks.nodes.p.traffic.service.exec.time.E.14=33
ducks.nodes.p.traffic.service.exec.time.E.15=84
ducks.nodes.p.traffic.service.exec.time.E.16=75
ducks.nodes.p.traffic.service.exec.time.E.17=86
ducks.nodes.p.traffic.service.exec.time.E.2=91
ducks.nodes.p.traffic.service.exec.time.E.3=37
ducks.nodes.p.traffic.service.exec.time.E.4=51
ducks.nodes.p.traffic.service.exec.time.E.5=86
ducks.nodes.p.traffic.service.exec.time.E.6=43
ducks.nodes.p.traffic.service.exec.time.E.7=64
ducks.nodes.p.traffic.service.exec.time.E.8=35
ducks.nodes.p.traffic.service.exec.time.E.9=77
